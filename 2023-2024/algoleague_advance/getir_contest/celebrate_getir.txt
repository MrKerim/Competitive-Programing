It’s two hours until the new year and people are placing orders very often to celebrate the new year with Getir.

You will be given a graph consisting of N nodes numbered from 1 to N. Current location of K couriers and K houses will be specified on the graph.

Each courier must be matched exactly with one house. However, matching couriers with houses that are far from their current location will increase fuel costs and lengthen the delivery time. So, Havva wants to find the matching with the minimum cost by calculating the cost for each matching.

The cost of a matching is the sum of the squares of the distances between the houses and the couriers that will go to them. If there are multiple paths between nodes x and y , calculate the distance using the shortest one.

Find the best matching and calculate the minimum cost possible to help Havva.

INPUT FORMAT

The first line contains N (number of nodes), M (number of edges), and K . (number of orders) Next M lines contain u , v and w , indicating that there is an edge between u and v with length w . Next line contains K numbers c_1 , c_2 , ..., c_K. (c_i is the number of the node where the i’th courier is currently located.) Next and the last line contains K numbers h_1 , h_2 , ..., h_K . (h_i is the number of the node where the i’th house is located.)

OUTPUT FORMAT

Print the minimum cost possible.

CONSTRAINTS

	•	1 ≤ N ≤ 100000
	•	1 ≤ M ≤ 200000
	•	1 ≤ K ≤ 18
	•	1 ≤ u , v , h_i , c_i ≤ N
	•	1 ≤ w ≤ 100
	•	It is guaranteed that given graph is connected.


SAMPLE INPUT

6 10 3
6 3 5
1 2 8
1 3 4
6 2 11
2 5 6
6 5 7
6 1 10
4 1 9
2 4 2
4 3 4
4 3 6
1 2 3

SAMPLE OUTPUT

45

SAMPLE INPUT 2

5 9 1
1 2 69
1 3 24
1 4 57
1 5 97
2 3 18
2 4 43
2 5 14
3 5 5
4 5 7
1
4

SAMPLE OUTPUT 2

1296

